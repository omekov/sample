package handlers

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"sync/atomic"
	"syscall"
	"time"

	"github.com/omekov/sample/config"
	_ "github.com/omekov/sample/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/omekov/sample/internal/apiserver/stores"

	"github.com/gorilla/mux"
	"github.com/sirupsen/logrus"
	httpSwagger "github.com/swaggo/http-swagger"
)

// Server ...
type Server struct {
	Config *Config
	Logger *logrus.Logger
	Store  *stores.Store
}

// Config ...
type Config struct {
	Router *mux.Router
	http.Server
	ShutdownReq chan bool
	ReqCount    uint32
}

func (c *Config) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	c.Router.ServeHTTP(w, r)
}

// ConfigureRouter ...
func ConfigureRouter() *Config {
	return &Config{
		Router: mux.NewRouter(),
		Server: http.Server{
			Addr:         ":" + config.IsReadyENV(config.PORT),
			ReadTimeout:  10 * time.Second,
			WriteTimeout: 10 * time.Second,
		},
		ShutdownReq: make(chan bool),
	}
}

// Handlers ...
func (s *Server) Handlers() {
	s.Config.Router.Use(s.setRequestID)
	s.Config.Router.Use(s.setHeader)
	s.Config.Router.Use(mux.CORSMethodMiddleware(s.Config.Router))
	s.Config.Router.Use(s.logRequest)
	s.Config.Router.HandleFunc("/signin", s.signIn()).Methods(http.MethodPost, http.MethodOptions)
	s.Config.Router.HandleFunc("/signup", s.signUp()).Methods(http.MethodPost, http.MethodOptions)
	s.Config.Router.HandleFunc("/refresh", s.refreshToken()).Methods(http.MethodPost, http.MethodOptions)
	private := s.Config.Router.PathPrefix("/api").Subrouter()
	private.Use(s.authenticateUser)
	private.HandleFunc("/whoami", s.whoami()).Methods(http.MethodGet, http.MethodOptions)

	// Swagger
	s.Config.Router.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)

}

// WaitShutdown ...
func (s *Server) WaitShutdown() {
	irqSig := make(chan os.Signal, 1)
	signal.Notify(irqSig, syscall.SIGINT, syscall.SIGTERM)

	select {
	case sig := <-irqSig:
		log.Printf("Shutdown request (signal: %v)", sig)
	case sig := <-s.Config.ShutdownReq:
		log.Printf("Shutdown request (/shutdown %v)", sig)
	}

	log.Printf("Stoping http server ...")

	//Create shutdown context with 10 second timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	//shutdown the server
	err := s.Config.Shutdown(ctx)
	if err != nil {
		log.Printf("Shutdown request error: %v", err)
	}
}

// ShutdownHandler ...
func (s *Server) ShutdownHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("Shutdown server"))

	//Do nothing if shutdown request already issued
	//if s.reqCount == 0 then set to 1, return true otherwise false
	if !atomic.CompareAndSwapUint32(&s.Config.ReqCount, 0, 1) {
		log.Printf("Shutdown through API call in progress...")
		return
	}

	go func() {
		s.Config.ShutdownReq <- true
	}()
}

// Run ...
func (s *Server) Run() {
	server := ConfigureRouter()

	done := make(chan bool)
	go func() {
		err := server.ListenAndServe()
		if err != nil {
			log.Printf("Listen and serve: %v", err)
		}
		done <- true
	}()

	//wait shutdown
	s.WaitShutdown()

	<-done
}
